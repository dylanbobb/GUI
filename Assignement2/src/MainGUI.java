import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

// Programmed by: Dylan Bobb & Karim Botros

public class MainGUI extends javax.swing.JFrame {
    
    // This boolean is used to prevent a user from saving an unedited image and also to update the info label.
    private boolean wasEdited = false;
    
    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        openBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        processLbl = new javax.swing.JLabel();
        boxFilterLbl = new javax.swing.JLabel();
        gaussianFilterLbl = new javax.swing.JLabel();
        edgeLbl = new javax.swing.JLabel();
        gammaCorrectionLbl = new javax.swing.JLabel();
        greyScaleLbl = new javax.swing.JLabel();
        applyBtn = new javax.swing.JButton();
        boxFilterBox = new javax.swing.JCheckBox();
        gaussianFilterBox = new javax.swing.JCheckBox();
        edgeBox = new javax.swing.JCheckBox();
        greyScaleBox = new javax.swing.JCheckBox();
        inputImage = new ImagePanel();
        outputImage = new ImagePanel();
        gammaSlider = new javax.swing.JSlider();
        sharpenLbl = new javax.swing.JLabel();
        sharpenBox = new javax.swing.JCheckBox();
        resetGammaBtn = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openItem = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        quitItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        openBtn.setText("Open");
        openBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                openBtnActionPerformed(evt);
            }
        });

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveBtnActionPerformed(evt);
            }
        });

        processLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        boxFilterLbl.setText("Box Filter:");

        gaussianFilterLbl.setText("Gaussian Filter:");

        edgeLbl.setText("Edge Detection Filter:");

        gammaCorrectionLbl.setText("Gamma Correction:");

        greyScaleLbl.setText("Convert to Grey Scales");

        applyBtn.setText("Apply");
        applyBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                applyBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputImageLayout = new javax.swing.GroupLayout(inputImage);
        inputImage.setLayout(inputImageLayout);
        inputImageLayout.setHorizontalGroup(
            inputImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        inputImageLayout.setVerticalGroup(
            inputImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout outputImageLayout = new javax.swing.GroupLayout(outputImage);
        outputImage.setLayout(outputImageLayout);
        outputImageLayout.setHorizontalGroup(
            outputImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        outputImageLayout.setVerticalGroup(
            outputImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gammaSlider.setMaximum(200);
        gammaSlider.setMinimum(1);
        gammaSlider.setValue(100);

        sharpenLbl.setText("Sharpen Filter");

        resetGammaBtn.setText("Reset Gamma Correction");
        resetGammaBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                resetGammaBtnActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        openItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openItem.setText("Open Image");
        openItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                openItemActionPerformed(evt);
            }
        });
        fileMenu.add(openItem);

        saveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveItem.setText("Save Image");
        saveItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveItem);

        quitItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitItem.setText("Quit");
        quitItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                quitItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(processLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(openBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(inputImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 20, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(saveBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(outputImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(applyBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(boxFilterLbl)
                                    .addComponent(gaussianFilterLbl)
                                    .addComponent(edgeLbl))
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(edgeBox)
                                    .addComponent(gaussianFilterBox)
                                    .addComponent(boxFilterBox)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(gammaCorrectionLbl)
                                .addGap(37, 37, 37)
                                .addComponent(gammaSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(sharpenLbl)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sharpenBox))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(greyScaleLbl)
                                    .addGap(18, 18, 18)
                                    .addComponent(greyScaleBox))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(resetGammaBtn)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(outputImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openBtn)
                    .addComponent(saveBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(processLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(boxFilterLbl)
                    .addComponent(boxFilterBox))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gaussianFilterBox)
                    .addComponent(gaussianFilterLbl, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(edgeLbl)
                    .addComponent(edgeBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(gammaCorrectionLbl)
                    .addComponent(gammaSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetGammaBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(greyScaleLbl)
                    .addComponent(greyScaleBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sharpenLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sharpenBox, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(applyBtn)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitItemActionPerformed
        quit();
    }//GEN-LAST:event_quitItemActionPerformed

    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        saveImage();
    }//GEN-LAST:event_saveItemActionPerformed

    private void openItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openItemActionPerformed
        openImage();
    }//GEN-LAST:event_openItemActionPerformed

    private void openBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBtnActionPerformed
        openImage();
    }//GEN-LAST:event_openBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        saveImage();
    }//GEN-LAST:event_saveBtnActionPerformed

    private void applyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyBtnActionPerformed
        applyImage();
    }//GEN-LAST:event_applyBtnActionPerformed

    private void resetGammaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetGammaBtnActionPerformed
        // Resets the gamma slider to the default position.
        gammaSlider.setValue(100);
    }//GEN-LAST:event_resetGammaBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }
    
    
    // This method opens a file chooser and sets both image panels to the selected image.
    private void openImage() {
        final JFileChooser fc = new JFileChooser();
        
        fc.setCurrentDirectory(new File("./images"));
        
        fc.setFileFilter(new FileFilter(){
            @Override
            public boolean accept(File pathname) {
                String[] acceptedExtensions = {".jpg", ".png", ".bmp"};
                for (String ext : acceptedExtensions) {
                    if (pathname.getName().toLowerCase().endsWith(ext)){
                        return true;
                    }
                }
                return false;
            }
            @Override
            public String getDescription() {
                return "Image Files";
            }
        });
        
        int returnVal = fc.showOpenDialog(null);
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File inputImageFile = fc.getSelectedFile();
            String path = inputImageFile.getAbsolutePath();
            if(!(path.endsWith(".png") || path.endsWith("jpg") || path.endsWith(".bmp"))) {
                processLbl.setText("Error: You must select an image");
            }
            else {
                try {
                    inputImage.setImage(ImageIO.read(inputImageFile));
                    outputImage.setImage(ImageIO.read(inputImageFile));
                    processLbl.setText("Image Sucessfully Loaded!");
                }
                catch (IOException e) {processLbl.setText("Error Loading Image!");}
            }
        }
        else {
            processLbl.setText("Image Loading Cancelled");
        }
        wasEdited = false;
    }
    
    // This method opens a file chooser and allows the user to save the image currently located in the outputImage panel.
    private void saveImage() {
        
        if (wasEdited) {
        
            final JFileChooser fc = new JFileChooser();

            fc.setCurrentDirectory(new File("./images"));

            int returnVal = fc.showSaveDialog(null);   
        
            if(returnVal == JFileChooser.APPROVE_OPTION) {
                
                File outputLocation = fc.getSelectedFile();
                String path = outputLocation.getAbsolutePath();
                
                if(!(path.endsWith(".png") || path.endsWith(".jpg") || path.endsWith(".bmp"))) {
                    path = outputLocation.getAbsolutePath().concat(".png");
                }
                
                try {
                    BufferedImage output = outputImage.getBufferedImage(); 
                    ImageIO.write(output, "png", new File(path));
                    processLbl.setText("Image Sucessfully Saved!");
                }
                catch (IOException e) {
                    processLbl.setText("Image Saving Failed!");
                }
                processLbl.setText("Image Sucessfully Saved!");
            }
            else {
                processLbl.setText("Image Saving Cancelled");
            }
            
        }
        
        else {
            processLbl.setText("Save Failed : The Image was not Edited");
        }

    }
    
    private void applyImage() {
        
        BufferedImage output = inputImage.getBufferedImage();

        // At first, the image is not modified, but if the user did select a filter, this will change before it is visible.
        processLbl.setText("Image is not Modified!");
        wasEdited = false;
        
        if (boxFilterBox.isSelected()) {
            output = ImageProcessor.applyBoxBlur(output);
            wasEdited = true;
            processLbl.setText("Image Sucessfully Processed!");
        }
        
        if (gaussianFilterBox.isSelected()) {
            output = ImageProcessor.applyGaussianBlur(output);
            wasEdited = true;
            processLbl.setText("Image Sucessfully Processed!");
        }
        
        if (edgeBox.isSelected()) {
            output = ImageProcessor.applyEdgeFilter(output);
            wasEdited = true;
            processLbl.setText("Image Sucessfully Processed!");
        }
        
        if (sharpenBox.isSelected()) {
            output = ImageProcessor.applySharpenFilter(output);
            wasEdited = true;
            processLbl.setText("Image Sucessfully Processed!");
        }
        
        if (gammaSlider.getValue() != 100) {
            output = ImageProcessor.applyGammaCorrection(output, gammaSlider.getValue());
            wasEdited = true;
            processLbl.setText("Image Sucessfully Processed!");
        }
        else {
            ImageProcessor.applyGammaCorrection(output, 100);
        }
        
        if (greyScaleBox.isSelected()) {
            output = ImageProcessor.convertToGreyScale(output);
            wasEdited = true;
            processLbl.setText("Image Sucessfully Processed!");
        }
        
        outputImage.setImage(output);

    }
    
    private void quit() {
        System.exit(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyBtn;
    private javax.swing.JCheckBox boxFilterBox;
    private javax.swing.JLabel boxFilterLbl;
    private javax.swing.JCheckBox edgeBox;
    private javax.swing.JLabel edgeLbl;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel gammaCorrectionLbl;
    private javax.swing.JSlider gammaSlider;
    private javax.swing.JCheckBox gaussianFilterBox;
    private javax.swing.JLabel gaussianFilterLbl;
    private javax.swing.JCheckBox greyScaleBox;
    private javax.swing.JLabel greyScaleLbl;
    private ImagePanel inputImage;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton openBtn;
    private javax.swing.JMenuItem openItem;
    private ImagePanel outputImage;
    private javax.swing.JLabel processLbl;
    private javax.swing.JMenuItem quitItem;
    private javax.swing.JButton resetGammaBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JCheckBox sharpenBox;
    private javax.swing.JLabel sharpenLbl;
    // End of variables declaration//GEN-END:variables
}
